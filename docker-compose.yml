version: "3"
  
services:
#Added Service Registry Local Image
  serviceregistry:
    container_name: serviceregistry
    hostname: serviceregistry
    image: serviceregistry
    ports:
      - "8761:8761"
    networks:
      - test-network
#Gateway Service Local Image
  gateway-service:
    container_name: gateway
    hostname: gateway
    image: gateway
    environment:
      - JAVA_OPTS=
        -DEUREKA_SERVER=http://localhost:8761/eureka
    ports:
      - "8888:8888"
    #    links:
    #      - zipkin
    depends_on:
      - serviceregistry
    #      - zipkin
    networks:
      - test-network
#Added Employee Service Local Image
  employee-service:
    container_name: employee-service
    hostname: employee-service
    image: employee-service
    environment:
      - JAVA_OPTS=
        -DEUREKA_SERVER=http://localhost:8761/eureka
    ports:
      - "8890:8890"
    #    links:
    #      - zipkin
    depends_on:
      - serviceregistry
      - employee-database
    #      - zipkin
    networks:
      - test-network
#Added Department Service Local Image
  department-service:
    container_name: department-service
    hostname: department-service
    image: department-service
    environment:
      - JAVA_OPTS=
        -DEUREKA_SERVER=http://serviceregistry:8761/eureka
    ports:
      - "8889:8889"
    #    links:
    #      - zipkin
    depends_on:
      - serviceregistry
      - department-database
    #      - zipkin
    networks:
      - test-network
#Added Department Service Local Image
  hystrix-service:
    container_name: hystrix-service
    hostname: hystrix-service
    image: hystrix-service
    environment:
      - JAVA_OPTS=
        -DEUREKA_SERVER=http://serviceregistry:8761/eureka
    ports:
      - "9090:9090"
    #    links:
    #      - zipkin
    depends_on:
      - serviceregistry
    #      - zipkin
    networks:
      - test-network
#Added MySQL DB Image from Docker store for Employee Service
  employee-database:
    container_name: employee-database
    hostname: employee-database
    image: mysql:8
    environment:
        MYSQL_DATABASE: employee
        # So you don't have to use root, but you can if you like
        MYSQL_USER: "user"
        # You can use whatever password you like
        MYSQL_PASSWORD: root
        # Password for root access
        MYSQL_ROOT_PASSWORD: root
    ports:
      # <Port exposed> : < MySQL Port running inside container>
      - "3306:3306"
    expose:
      # Opens port 3306 on the container
      - "3306"
      # Where our data will be persisted
    volumes:
      - employee-db:/var/lib/mysql
    networks:
      - test-network
#Added MySQL DB Image from Docker store for Department Service
  department-database:
    container_name: department-database
    hostname: department-database
    image: mysql:8
    environment:
        MYSQL_DATABASE: department
        # So you don't have to use root, but you can if you like
        MYSQL_USER: "user"
        # You can use whatever password you like
        MYSQL_PASSWORD: root
        # Password for root access
        MYSQL_ROOT_PASSWORD: root
    ports:
      # <Port exposed> : < MySQL Port running inside container>
      - "3307:3306"
    expose:
      # Opens port 3307 on the container
      - "3307"
      # Where our data will be persisted
    volumes:
      - department-db:/var/lib/mysql
    networks:
      - test-network
#Added Images for zookeeper
  zookeeper:
    image: zookeeper:3.7.0
    container_name: zookeeper
    restart: "no"
    networks:
      - test-network
    ports:
      - "2181:2181"
#Added Images for Kafka
  kafka:
    image: obsidiandynamics/kafka
    container_name: kafka
    restart: "no"
    networks:
      - test-network
    ports:
      - "9092:9092"
    environment:
      KAFKA_LISTENERS: "INTERNAL://:29092,EXTERNAL://:9092"
      KAFKA_ADVERTISED_LISTENERS: "INTERNAL://kafka:29092,EXTERNAL://localhost:9092"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT"
      KAFKA_INTER_BROKER_LISTENER_NAME: "INTERNAL"
      KAFKA_ZOOKEEPER_SESSION_TIMEOUT: "6000"
      KAFKA_RESTART_ATTEMPTS: "10"
      KAFKA_RESTART_DELAY: "5"
      ZOOKEEPER_AUTOPURGE_PURGE_INTERVAL: "0"
    depends_on:
      - zookeeper
#Added Images for Kafka dashboard
  kafdrop:
    image: obsidiandynamics/kafdrop
    container_name: kafdrop
    restart: "no"
    networks:
      - test-network
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka:29092"
    depends_on:
      - "kafka"

volumes:
  employee-db:
  department-db:

networks:
  test-network: